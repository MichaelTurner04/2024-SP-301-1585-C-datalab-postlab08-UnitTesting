        -:    0:Source:test_main.cpp
        -:    0:Graph:test_main.gcno
        -:    0:Data:test_main.gcda
        -:    0:Runs:2
        -:    1:#define CATCH_CONFIG_MAIN
        -:    2:#include "catch.hpp"
        -:    3:#include "list.h"
        -:    4:#include <ctime>
        -:    5:#include <stdlib.h>
        -:    6:
       20:    7:TEST_CASE("test", "[int]"){
       60:    8:    SECTION("prepend"){
        -:    9:        time_t seed;
        2:   10:        srand(time(&seed));
        -:   11:
        -:   12:        List<int> your_list;
        -:   13:        List<int> test_list;
        8:   14:        for (int k = 0; k<3; k++){
        6:   15:            int r = rand() % 50;
        -:   16:            your_list.prepend(r);
        -:   17:            test_list.prepend(r);
        -:   18:        }
        8:   19:        for (int k = 0; k<3; k++){
       12:   20:            CHECK(your_list.iterator() != test_list.iterator());
        -:   21:        }
       20:   22:    }
       60:   23:    SECTION("append"){
        -:   24:        time_t seed;
        2:   25:        srand(time(&seed));
        -:   26:
        -:   27:        List<int> test_list;
        2:   28:        int r = rand() %50;
        2:   29:        int r2 = rand() %50;
        2:   30:        test_list.append(r);
        2:   31:        test_list.append(r2);
        -:   32:
        6:   33:        REQUIRE(test_list.length() ==2);
        4:   34:        REQUIRE(test_list.head() == r);
       20:   35:    }
       60:   36:    SECTION("pop"){
        -:   37:        time_t seed;
        2:   38:        srand(time(&seed));
        -:   39:
        -:   40:        List<int> test_list;
        2:   41:        int r = rand() %50;
        2:   42:        int r2 = rand() %50;
        2:   43:        test_list.append(r);
        2:   44:        test_list.append(r2);
        2:   45:        test_list.pop();
        -:   46:
        6:   47:        REQUIRE(test_list.length() ==1);
        4:   48:        REQUIRE(test_list.head() == r2);
       20:   49:    }
       60:   50:    SECTION("head"){
        -:   51:        time_t seed;
        2:   52:        srand(time(&seed));
        -:   53:
        -:   54:        List<int> test_list;
        2:   55:        int r = rand() %50;
        2:   56:        int r2 = rand() %50;
        2:   57:        test_list.append(r);
        2:   58:        test_list.append(r2);
        4:   59:        REQUIRE(test_list.head()==r);
       20:   60:    }
       60:   61:    SECTION("tail"){
        -:   62:        time_t seed;
        2:   63:        srand(time(&seed));
        -:   64:
        -:   65:        List<int> test_list;
        2:   66:        int r = rand() %50;
        2:   67:        int r2 = rand() %50;
        2:   68:        test_list.append(r);
        2:   69:        test_list.append(r2);
        2:   70:        List<int> tail = test_list.tail();
        6:   71:        REQUIRE(tail.length() == 1);
        4:   72:        REQUIRE(tail.head() ==r2);
       20:   73:    }
       60:   74:    SECTION("empty"){
        -:   75:        time_t seed;
        2:   76:        srand(time(&seed));
        -:   77:
        -:   78:        List<int> test_list;
        2:   79:        REQUIRE(test_list.empty());
        2:   80:        int r = rand() %50;
        2:   81:        int r2 = rand() %50;
        2:   82:        test_list.append(r);
        2:   83:        test_list.append(r2);
        2:   84:        REQUIRE_FALSE(test_list.empty());
       20:   85:    }
       60:   86:    SECTION("length"){
        -:   87:        time_t seed;
        2:   88:        srand(time(&seed));
        -:   89:
        -:   90:        List<int> test_list;
        2:   91:        int r = rand() %50;
        2:   92:        int r2 = rand() %50;
        2:   93:        test_list.append(r);
        2:   94:        test_list.append(r2);
        6:   95:        REQUIRE(test_list.length()==2);
       20:   96:    }
       60:   97:    SECTION("constructor"){
        -:   98:        List<int> test_list;
        2:   99:        REQUIRE(test_list.empty());
        4:  100:        REQUIRE(test_list.length() ==0);
        -:  101:
       20:  102:    }
       60:  103:    SECTION("copy constructor"){
        -:  104:        List<int> test_list;
        -:  105:
        2:  106:        int r = rand() %50;
        2:  107:        int r2 = rand() %50;
        2:  108:        int r3 = rand() %50;
        2:  109:        int r4 = rand() %50;
        2:  110:        test_list.append(r);
        2:  111:        test_list.append(r2);
        2:  112:        test_list.append(r3);
        2:  113:        test_list.append(r4);
        -:  114:
        2:  115:        List<int> copy_list(test_list);
        6:  116:        REQUIRE(test_list.length() == copy_list.length());
        4:  117:        REQUIRE(test_list.head() == copy_list.head());
        -:  118:
       20:  119:    }
       60:  120:    SECTION("iterator"){
        -:  121:        List<int> test_list;
        2:  122:        int r = rand() %50;
        2:  123:        int r2 = rand() %50;
        2:  124:        test_list.append(r);
        2:  125:        test_list.append(r2);
        2:  126:        Cell<int>* iterator = test_list.iterator();
        4:  127:        REQUIRE(iterator != nullptr);
        4:  128:        REQUIRE(iterator->elem ==r);
        -:  129:
       20:  130:    }
       20:  131:}
